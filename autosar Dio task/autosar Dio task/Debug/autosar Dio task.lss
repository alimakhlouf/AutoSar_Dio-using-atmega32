
autosar Dio task.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  000003f8  0000046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013cc  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a3b  00000000  00000000  000019b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006aa  00000000  00000000  000023eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000128  00000000  00000000  00002a98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000663  00000000  00000000  00002bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007ca  00000000  00000000  00003223  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000039ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 38       	cpi	r26, 0x84	; 132
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e8       	ldi	r26, 0x84	; 132
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 38       	cpi	r26, 0x84	; 132
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 55 01 	call	0x2aa	; 0x2aa <main>
  8a:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Det_ReportError>:
}


Std_ReturnType Det_ReportError(uint16 ModuleId,uint8 InstanceId,uint8 ApiId, uint8 ErrorId)
{
	*(det_config.det_port) = ErrorId;
  92:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  96:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
  9a:	20 83       	st	Z, r18
	
	return E_OK;
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	08 95       	ret

000000a0 <Dio_ReadChannel>:
	}
	
#if DioDevErrorDetect == STD_ON
	if (i >= GROUPS_NUM)
	{
		Det_ReportError(DioId, 0, DIO_WRITECHANNELGROUP_ID, DIO_E_PARAM_INVALID_GROUP);
  a0:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <channels>
  a4:	89 17       	cp	r24, r25
  a6:	09 f4       	brne	.+2      	; 0xaa <Dio_ReadChannel+0xa>
  a8:	49 c0       	rjmp	.+146    	; 0x13c <Dio_ReadChannel+0x9c>
  aa:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <channels+0x3>
  ae:	89 17       	cp	r24, r25
  b0:	99 f1       	breq	.+102    	; 0x118 <Dio_ReadChannel+0x78>
  b2:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <channels+0x6>
  b6:	89 17       	cp	r24, r25
  b8:	91 f1       	breq	.+100    	; 0x11e <Dio_ReadChannel+0x7e>
  ba:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <channels+0x9>
  be:	98 17       	cp	r25, r24
  c0:	89 f1       	breq	.+98     	; 0x124 <Dio_ReadChannel+0x84>
  c2:	2a e0       	ldi	r18, 0x0A	; 10
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	60 e0       	ldi	r22, 0x00	; 0
  c8:	8d e7       	ldi	r24, 0x7D	; 125
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 49 00 	call	0x92	; 0x92 <Det_ReportError>
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	08 95       	ret
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	81 54       	subi	r24, 0x41	; 65
  d8:	91 09       	sbc	r25, r1
  da:	fc 01       	movw	r30, r24
  dc:	ee 0f       	add	r30, r30
  de:	ff 1f       	adc	r31, r31
  e0:	8e 0f       	add	r24, r30
  e2:	9f 1f       	adc	r25, r31
  e4:	ee 27       	eor	r30, r30
  e6:	ff 27       	eor	r31, r31
  e8:	e8 1b       	sub	r30, r24
  ea:	f9 0b       	sbc	r31, r25
  ec:	81 ad       	ldd	r24, Z+57	; 0x39
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	04 2e       	mov	r0, r20
  f4:	02 c0       	rjmp	.+4      	; 0xfa <Dio_ReadChannel+0x5a>
  f6:	22 0f       	add	r18, r18
  f8:	33 1f       	adc	r19, r19
  fa:	0a 94       	dec	r0
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <Dio_ReadChannel+0x56>
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	28 23       	and	r18, r24
 102:	39 23       	and	r19, r25
 104:	02 c0       	rjmp	.+4      	; 0x10a <Dio_ReadChannel+0x6a>
 106:	35 95       	asr	r19
 108:	27 95       	ror	r18
 10a:	4a 95       	dec	r20
 10c:	e2 f7       	brpl	.-8      	; 0x106 <Dio_ReadChannel+0x66>
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	23 2b       	or	r18, r19
 112:	c9 f4       	brne	.+50     	; 0x146 <Dio_ReadChannel+0xa6>
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	08 95       	ret
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	05 c0       	rjmp	.+10     	; 0x128 <Dio_ReadChannel+0x88>
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <Dio_ReadChannel+0x88>
 124:	83 e0       	ldi	r24, 0x03	; 3
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	fc 01       	movw	r30, r24
 12a:	ee 0f       	add	r30, r30
 12c:	ff 1f       	adc	r31, r31
 12e:	e8 0f       	add	r30, r24
 130:	f9 1f       	adc	r31, r25
 132:	ec 59       	subi	r30, 0x9C	; 156
 134:	ff 4f       	sbci	r31, 0xFF	; 255
 136:	82 81       	ldd	r24, Z+2	; 0x02
 138:	41 81       	ldd	r20, Z+1	; 0x01
 13a:	cc cf       	rjmp	.-104    	; 0xd4 <Dio_ReadChannel+0x34>
 13c:	e4 e6       	ldi	r30, 0x64	; 100
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	82 81       	ldd	r24, Z+2	; 0x02
 142:	41 81       	ldd	r20, Z+1	; 0x01
 144:	c7 cf       	rjmp	.-114    	; 0xd4 <Dio_ReadChannel+0x34>
 146:	08 95       	ret

00000148 <Dio_WriteChannel>:
 148:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <channels>
 14c:	89 17       	cp	r24, r25
 14e:	a9 f0       	breq	.+42     	; 0x17a <Dio_WriteChannel+0x32>
 150:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <channels+0x3>
 154:	89 17       	cp	r24, r25
 156:	59 f0       	breq	.+22     	; 0x16e <Dio_WriteChannel+0x26>
 158:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <channels+0x6>
 15c:	89 17       	cp	r24, r25
 15e:	51 f0       	breq	.+20     	; 0x174 <Dio_WriteChannel+0x2c>
 160:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <channels+0x9>
 164:	98 13       	cpse	r25, r24
 166:	37 c0       	rjmp	.+110    	; 0x1d6 <Dio_WriteChannel+0x8e>
 168:	83 e0       	ldi	r24, 0x03	; 3
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	08 c0       	rjmp	.+16     	; 0x17e <Dio_WriteChannel+0x36>
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	05 c0       	rjmp	.+10     	; 0x17e <Dio_WriteChannel+0x36>
 174:	82 e0       	ldi	r24, 0x02	; 2
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	02 c0       	rjmp	.+4      	; 0x17e <Dio_WriteChannel+0x36>
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	dc 01       	movw	r26, r24
 180:	aa 0f       	add	r26, r26
 182:	bb 1f       	adc	r27, r27
 184:	a8 0f       	add	r26, r24
 186:	b9 1f       	adc	r27, r25
 188:	ac 59       	subi	r26, 0x9C	; 156
 18a:	bf 4f       	sbci	r27, 0xFF	; 255
 18c:	12 96       	adiw	r26, 0x02	; 2
 18e:	ec 91       	ld	r30, X
 190:	12 97       	sbiw	r26, 0x02	; 2
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	e1 54       	subi	r30, 0x41	; 65
 196:	f1 09       	sbc	r31, r1
 198:	cf 01       	movw	r24, r30
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	e8 0f       	add	r30, r24
 1a0:	f9 1f       	adc	r31, r25
 1a2:	f1 95       	neg	r31
 1a4:	e1 95       	neg	r30
 1a6:	f1 09       	sbc	r31, r1
 1a8:	82 ad       	ldd	r24, Z+58	; 0x3a
 1aa:	11 96       	adiw	r26, 0x01	; 1
 1ac:	4c 91       	ld	r20, X
 1ae:	21 e0       	ldi	r18, 0x01	; 1
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	04 2e       	mov	r0, r20
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <Dio_WriteChannel+0x72>
 1b6:	22 0f       	add	r18, r18
 1b8:	33 1f       	adc	r19, r19
 1ba:	0a 94       	dec	r0
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <Dio_WriteChannel+0x6e>
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	82 23       	and	r24, r18
 1c2:	93 23       	and	r25, r19
 1c4:	04 2e       	mov	r0, r20
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <Dio_WriteChannel+0x84>
 1c8:	95 95       	asr	r25
 1ca:	87 95       	ror	r24
 1cc:	0a 94       	dec	r0
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <Dio_WriteChannel+0x80>
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	a1 f4       	brne	.+40     	; 0x1fc <Dio_WriteChannel+0xb4>
 1d4:	08 c0       	rjmp	.+16     	; 0x1e6 <Dio_WriteChannel+0x9e>
 1d6:	2a e0       	ldi	r18, 0x0A	; 10
 1d8:	41 e0       	ldi	r20, 0x01	; 1
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	8d e7       	ldi	r24, 0x7D	; 125
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 49 00 	call	0x92	; 0x92 <Det_ReportError>
 1e4:	08 95       	ret
 1e6:	83 ad       	ldd	r24, Z+59	; 0x3b
 1e8:	20 95       	com	r18
 1ea:	28 23       	and	r18, r24
 1ec:	70 e0       	ldi	r23, 0x00	; 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <Dio_WriteChannel+0xac>
 1f0:	66 0f       	add	r22, r22
 1f2:	77 1f       	adc	r23, r23
 1f4:	4a 95       	dec	r20
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <Dio_WriteChannel+0xa8>
 1f8:	62 2b       	or	r22, r18
 1fa:	63 af       	std	Z+59, r22	; 0x3b
 1fc:	08 95       	ret

000001fe <Dio_FlipChannel>:
}
#endif

#if (DioFlipChannelApi == STD_ON)
Dio_LevelType Dio_FlipChannel(Dio_ChannelType ChannelId)
{
 1fe:	cf 93       	push	r28
 200:	c8 2f       	mov	r28, r24
	uint8 ch_pin = 0;
	
	for (i = 0; i < PINS_NUM; i++ )
	{
		
		if (ChannelId == channels[i].Channel_Id)
 202:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <channels>
 206:	c8 17       	cp	r28, r24
 208:	09 f4       	brne	.+2      	; 0x20c <Dio_FlipChannel+0xe>
 20a:	45 c0       	rjmp	.+138    	; 0x296 <Dio_FlipChannel+0x98>
 20c:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <channels+0x3>
 210:	c8 17       	cp	r28, r24
 212:	61 f1       	breq	.+88     	; 0x26c <Dio_FlipChannel+0x6e>
 214:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <channels+0x6>
 218:	c8 17       	cp	r28, r24
 21a:	59 f1       	breq	.+86     	; 0x272 <Dio_FlipChannel+0x74>
 21c:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <channels+0x9>
 220:	8c 17       	cp	r24, r28
 222:	51 f1       	breq	.+84     	; 0x278 <Dio_FlipChannel+0x7a>
	}
	
#if DioDevErrorDetect == STD_ON
	if (i >= PINS_NUM)
	{
		Det_ReportError(DioId, 0, DIO_WRITECHANNEL_ID, DIO_E_PARAM_INVALID_CHANNEL_ID);
 224:	2a e0       	ldi	r18, 0x0A	; 10
 226:	41 e0       	ldi	r20, 0x01	; 1
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	8d e7       	ldi	r24, 0x7D	; 125
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 49 00 	call	0x92	; 0x92 <Det_ReportError>
		return Dio_ReadChannel(ChannelId); //applying SWS_Dio_00118 .. flip also reads the pin 
 232:	8c 2f       	mov	r24, r28
 234:	0e 94 50 00 	call	0xa0	; 0xa0 <Dio_ReadChannel>
 238:	36 c0       	rjmp	.+108    	; 0x2a6 <Dio_FlipChannel+0xa8>
	}
	
#endif
	
	
	TOGGLE_BIT(SPECIFIC_PORT_REG(mcu_port), ch_pin);
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	e1 54       	subi	r30, 0x41	; 65
 23e:	f1 09       	sbc	r31, r1
 240:	cf 01       	movw	r24, r30
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	e8 0f       	add	r30, r24
 248:	f9 1f       	adc	r31, r25
 24a:	f1 95       	neg	r31
 24c:	e1 95       	neg	r30
 24e:	f1 09       	sbc	r31, r1
 250:	23 ad       	ldd	r18, Z+59	; 0x3b
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <Dio_FlipChannel+0x5e>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	3a 95       	dec	r19
 25e:	e2 f7       	brpl	.-8      	; 0x258 <Dio_FlipChannel+0x5a>
 260:	82 27       	eor	r24, r18
 262:	83 af       	std	Z+59, r24	; 0x3b
	
	//applying SWS_Dio_00118 .. flip also reads the pin 
	//after flipping it
	return Dio_ReadChannel(ChannelId);
 264:	8c 2f       	mov	r24, r28
 266:	0e 94 50 00 	call	0xa0	; 0xa0 <Dio_ReadChannel>
 26a:	1d c0       	rjmp	.+58     	; 0x2a6 <Dio_FlipChannel+0xa8>
	uint8 ch_pin = 0;
	
	for (i = 0; i < PINS_NUM; i++ )
	{
		
		if (ChannelId == channels[i].Channel_Id)
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	05 c0       	rjmp	.+10     	; 0x27c <Dio_FlipChannel+0x7e>
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	02 c0       	rjmp	.+4      	; 0x27c <Dio_FlipChannel+0x7e>
 278:	83 e0       	ldi	r24, 0x03	; 3
 27a:	90 e0       	ldi	r25, 0x00	; 0
		{
			mcu_port = channels[i].port;
 27c:	dc 01       	movw	r26, r24
 27e:	aa 0f       	add	r26, r26
 280:	bb 1f       	adc	r27, r27
 282:	a8 0f       	add	r26, r24
 284:	b9 1f       	adc	r27, r25
 286:	ac 59       	subi	r26, 0x9C	; 156
 288:	bf 4f       	sbci	r27, 0xFF	; 255
 28a:	12 96       	adiw	r26, 0x02	; 2
 28c:	ec 91       	ld	r30, X
 28e:	12 97       	sbiw	r26, 0x02	; 2
			ch_pin = channels[i].pin_num;
 290:	11 96       	adiw	r26, 0x01	; 1
 292:	3c 91       	ld	r19, X
 294:	d2 cf       	rjmp	.-92     	; 0x23a <Dio_FlipChannel+0x3c>
	for (i = 0; i < PINS_NUM; i++ )
	{
		
		if (ChannelId == channels[i].Channel_Id)
		{
			mcu_port = channels[i].port;
 296:	a4 e6       	ldi	r26, 0x64	; 100
 298:	b0 e0       	ldi	r27, 0x00	; 0
 29a:	12 96       	adiw	r26, 0x02	; 2
 29c:	ec 91       	ld	r30, X
 29e:	12 97       	sbiw	r26, 0x02	; 2
			ch_pin = channels[i].pin_num;
 2a0:	11 96       	adiw	r26, 0x01	; 1
 2a2:	3c 91       	ld	r19, X
 2a4:	ca cf       	rjmp	.-108    	; 0x23a <Dio_FlipChannel+0x3c>
	
	//applying SWS_Dio_00118 .. flip also reads the pin 
	//after flipping it
	return Dio_ReadChannel(ChannelId);
	
}
 2a6:	cf 91       	pop	r28
 2a8:	08 95       	ret

000002aa <main>:
#include "Port.h"
#include "Det.h"

int main(void)
{
	Port_Init(&port_config);
 2aa:	80 e7       	ldi	r24, 0x70	; 112
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 88 01 	call	0x310	; 0x310 <Port_Init>
	
    /* Replace with your application code */
    while (1) 
    {
		Dio_FlipChannel(BUZZER);
 2b2:	86 e0       	ldi	r24, 0x06	; 6
 2b4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <Dio_FlipChannel>
		Dio_WriteChannel(LED, STD_HIGH);
 2b8:	61 e0       	ldi	r22, 0x01	; 1
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	0e 94 a4 00 	call	0x148	; 0x148 <Dio_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c0:	2f ef       	ldi	r18, 0xFF	; 255
 2c2:	89 e6       	ldi	r24, 0x69	; 105
 2c4:	98 e1       	ldi	r25, 0x18	; 24
 2c6:	21 50       	subi	r18, 0x01	; 1
 2c8:	80 40       	sbci	r24, 0x00	; 0
 2ca:	90 40       	sbci	r25, 0x00	; 0
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <main+0x1c>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <main+0x26>
 2d0:	00 00       	nop
		_delay_ms(1000);
		Dio_FlipChannel(BUZZER);
 2d2:	86 e0       	ldi	r24, 0x06	; 6
 2d4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <Dio_FlipChannel>
		Dio_WriteChannel(LED, STD_LOW);
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	0e 94 a4 00 	call	0x148	; 0x148 <Dio_WriteChannel>
 2e0:	2f ef       	ldi	r18, 0xFF	; 255
 2e2:	89 e6       	ldi	r24, 0x69	; 105
 2e4:	98 e1       	ldi	r25, 0x18	; 24
 2e6:	21 50       	subi	r18, 0x01	; 1
 2e8:	80 40       	sbci	r24, 0x00	; 0
 2ea:	90 40       	sbci	r25, 0x00	; 0
 2ec:	e1 f7       	brne	.-8      	; 0x2e6 <main+0x3c>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <main+0x46>
 2f0:	00 00       	nop
		_delay_ms(1000);	
		
		if (Dio_ReadChannel(SW) == STD_HIGH)
 2f2:	89 e0       	ldi	r24, 0x09	; 9
 2f4:	0e 94 50 00 	call	0xa0	; 0xa0 <Dio_ReadChannel>
 2f8:	81 30       	cpi	r24, 0x01	; 1
 2fa:	29 f4       	brne	.+10     	; 0x306 <main+0x5c>
		{
			Dio_WriteChannel(LED1, STD_HIGH);
 2fc:	61 e0       	ldi	r22, 0x01	; 1
 2fe:	88 e0       	ldi	r24, 0x08	; 8
 300:	0e 94 a4 00 	call	0x148	; 0x148 <Dio_WriteChannel>
 304:	d6 cf       	rjmp	.-84     	; 0x2b2 <main+0x8>
		}
		else
		{
			Dio_WriteChannel(LED1, STD_LOW);
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	88 e0       	ldi	r24, 0x08	; 8
 30a:	0e 94 a4 00 	call	0x148	; 0x148 <Dio_WriteChannel>
 30e:	d1 cf       	rjmp	.-94     	; 0x2b2 <main+0x8>

00000310 <Port_Init>:


//for now(as we have only studied the DIO module) this function is responsible for setting the 
//direction register of atmega32 (DDR register) of the corresponding channels selected
void Port_Init(const Port_ConfigType * ConfigPtr)
{
 310:	1f 93       	push	r17
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	dc 01       	movw	r26, r24
 318:	bc 01       	movw	r22, r24
 31a:	68 5f       	subi	r22, 0xF8	; 248
 31c:	7f 4f       	sbci	r23, 0xFF	; 255
						ConfigPtr->ChsDataStates[i]->channel_state);
		}
		else //if pull up then make it input and put high to the PORT reg
		{
			// assign pin as input
			ASSIGN_BIT(*(DDR_REG_BASE + PORT_OFFSET(PORT_CH_DATA(i)->port - 'A')), PORT_CH_DATA(i)->pin_num, 0);
 31e:	41 e0       	ldi	r20, 0x01	; 1
 320:	50 e0       	ldi	r21, 0x00	; 0
{
	
	for (uint8 i = 0; i < PINS_NUM; i++ )
	{
		
		if (ConfigPtr->ChsDataStates[i]->channel_state != PORT_PULLUP)
 322:	ed 91       	ld	r30, X+
 324:	fc 91       	ld	r31, X
 326:	11 97       	sbiw	r26, 0x01	; 1
 328:	92 81       	ldd	r25, Z+2	; 0x02
 32a:	92 30       	cpi	r25, 0x02	; 2
 32c:	29 f1       	breq	.+74     	; 0x378 <Port_Init+0x68>
		{
			//put this direction in the specific pin_no in the specific port
			ASSIGN_BIT(*(DDR_REG_BASE + PORT_OFFSET(PORT_CH_DATA(i)->port - 'A')), PORT_CH_DATA(i)->pin_num,
 32e:	c0 81       	ld	r28, Z
 330:	d1 81       	ldd	r29, Z+1	; 0x01
 332:	ea 81       	ldd	r30, Y+2	; 0x02
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	e1 54       	subi	r30, 0x41	; 65
 338:	f1 09       	sbc	r31, r1
 33a:	9f 01       	movw	r18, r30
 33c:	22 0f       	add	r18, r18
 33e:	33 1f       	adc	r19, r19
 340:	e2 0f       	add	r30, r18
 342:	f3 1f       	adc	r31, r19
 344:	f1 95       	neg	r31
 346:	e1 95       	neg	r30
 348:	f1 09       	sbc	r31, r1
 34a:	32 ad       	ldd	r19, Z+58	; 0x3a
 34c:	19 81       	ldd	r17, Y+1	; 0x01
 34e:	ea 01       	movw	r28, r20
 350:	01 2e       	mov	r0, r17
 352:	02 c0       	rjmp	.+4      	; 0x358 <Port_Init+0x48>
 354:	cc 0f       	add	r28, r28
 356:	dd 1f       	adc	r29, r29
 358:	0a 94       	dec	r0
 35a:	e2 f7       	brpl	.-8      	; 0x354 <Port_Init+0x44>
 35c:	2c 2f       	mov	r18, r28
 35e:	20 95       	com	r18
 360:	82 2f       	mov	r24, r18
 362:	83 23       	and	r24, r19
 364:	29 2f       	mov	r18, r25
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	02 c0       	rjmp	.+4      	; 0x36e <Port_Init+0x5e>
 36a:	22 0f       	add	r18, r18
 36c:	33 1f       	adc	r19, r19
 36e:	1a 95       	dec	r17
 370:	e2 f7       	brpl	.-8      	; 0x36a <Port_Init+0x5a>
 372:	28 2b       	or	r18, r24
 374:	22 af       	std	Z+58, r18	; 0x3a
 376:	35 c0       	rjmp	.+106    	; 0x3e2 <Port_Init+0xd2>
						ConfigPtr->ChsDataStates[i]->channel_state);
		}
		else //if pull up then make it input and put high to the PORT reg
		{
			// assign pin as input
			ASSIGN_BIT(*(DDR_REG_BASE + PORT_OFFSET(PORT_CH_DATA(i)->port - 'A')), PORT_CH_DATA(i)->pin_num, 0);
 378:	c0 81       	ld	r28, Z
 37a:	d1 81       	ldd	r29, Z+1	; 0x01
 37c:	ea 81       	ldd	r30, Y+2	; 0x02
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	e1 54       	subi	r30, 0x41	; 65
 382:	f1 09       	sbc	r31, r1
 384:	cf 01       	movw	r24, r30
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	e8 0f       	add	r30, r24
 38c:	f9 1f       	adc	r31, r25
 38e:	f1 95       	neg	r31
 390:	e1 95       	neg	r30
 392:	f1 09       	sbc	r31, r1
 394:	92 ad       	ldd	r25, Z+58	; 0x3a
 396:	9a 01       	movw	r18, r20
 398:	09 80       	ldd	r0, Y+1	; 0x01
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <Port_Init+0x90>
 39c:	22 0f       	add	r18, r18
 39e:	33 1f       	adc	r19, r19
 3a0:	0a 94       	dec	r0
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <Port_Init+0x8c>
 3a4:	82 2f       	mov	r24, r18
 3a6:	80 95       	com	r24
 3a8:	89 23       	and	r24, r25
 3aa:	82 af       	std	Z+58, r24	; 0x3a
			// put 1 to port pin to make it pull up
			ASSIGN_BIT(*(PORT_REG_BASE + PORT_OFFSET(PORT_CH_DATA(i)->port - 'A')), PORT_CH_DATA(i)->pin_num, 1);
 3ac:	ed 91       	ld	r30, X+
 3ae:	fc 91       	ld	r31, X
 3b0:	11 97       	sbiw	r26, 0x01	; 1
 3b2:	c0 81       	ld	r28, Z
 3b4:	d1 81       	ldd	r29, Z+1	; 0x01
 3b6:	ea 81       	ldd	r30, Y+2	; 0x02
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	e1 54       	subi	r30, 0x41	; 65
 3bc:	f1 09       	sbc	r31, r1
 3be:	cf 01       	movw	r24, r30
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	e8 0f       	add	r30, r24
 3c6:	f9 1f       	adc	r31, r25
 3c8:	f1 95       	neg	r31
 3ca:	e1 95       	neg	r30
 3cc:	f1 09       	sbc	r31, r1
 3ce:	23 ad       	ldd	r18, Z+59	; 0x3b
 3d0:	ca 01       	movw	r24, r20
 3d2:	09 80       	ldd	r0, Y+1	; 0x01
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <Port_Init+0xca>
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	0a 94       	dec	r0
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <Port_Init+0xc6>
 3de:	82 2b       	or	r24, r18
 3e0:	83 af       	std	Z+59, r24	; 0x3b
 3e2:	12 96       	adiw	r26, 0x02	; 2
//for now(as we have only studied the DIO module) this function is responsible for setting the 
//direction register of atmega32 (DDR register) of the corresponding channels selected
void Port_Init(const Port_ConfigType * ConfigPtr)
{
	
	for (uint8 i = 0; i < PINS_NUM; i++ )
 3e4:	a6 17       	cp	r26, r22
 3e6:	b7 07       	cpc	r27, r23
 3e8:	09 f0       	breq	.+2      	; 0x3ec <Port_Init+0xdc>
 3ea:	9b cf       	rjmp	.-202    	; 0x322 <Port_Init+0x12>
			ASSIGN_BIT(*(PORT_REG_BASE + PORT_OFFSET(PORT_CH_DATA(i)->port - 'A')), PORT_CH_DATA(i)->pin_num, 1);
		}
		
	}
	
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	1f 91       	pop	r17
 3f2:	08 95       	ret

000003f4 <_exit>:
 3f4:	f8 94       	cli

000003f6 <__stop_program>:
 3f6:	ff cf       	rjmp	.-2      	; 0x3f6 <__stop_program>
