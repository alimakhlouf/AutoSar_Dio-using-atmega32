
autosar Dio task.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  000003d8  0000044c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000135b  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009cb  00000000  00000000  0000191f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000689  00000000  00000000  000022ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000144  00000000  00000000  00002974  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000634  00000000  00000000  00002ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000897  00000000  00000000  000030ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00003983  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ed       	ldi	r30, 0xD8	; 216
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 38       	cpi	r26, 0x84	; 132
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e8       	ldi	r26, 0x84	; 132
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 38       	cpi	r26, 0x84	; 132
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 45 01 	call	0x28a	; 0x28a <main>
  8a:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Det_ReportError>:

Std_ReturnType Det_ReportError(uint16 ModuleId,uint8 InstanceId,uint8 ApiId, uint8 ErrorId)
{
	while(1)
	{
		*(det_config.det_port) = ErrorId;
  92:	a0 e6       	ldi	r26, 0x60	; 96
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	12 96       	adiw	r26, 0x02	; 2
  98:	ed 91       	ld	r30, X+
  9a:	fc 91       	ld	r31, X
  9c:	13 97       	sbiw	r26, 0x03	; 3
  9e:	20 83       	st	Z, r18
  a0:	fa cf       	rjmp	.-12     	; 0x96 <Det_ReportError+0x4>

000000a2 <Dio_ReadChannel>:
	
	//assign the group to the port by first clearing the bits and then oring with the channel 
	//group after shifting thm to their specific offset  
	SPECIFIC_PORT_REG = ((SPECIFIC_PORT_REG) & ~(ChannelGroupIdPtr->mask)) | 
	                     (Level << ChannelGroupIdPtr->offset);
}
  a2:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <channels>
  a6:	89 17       	cp	r24, r25
  a8:	e1 f1       	breq	.+120    	; 0x122 <Dio_ReadChannel+0x80>
  aa:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <channels+0x3>
  ae:	98 17       	cp	r25, r24
  b0:	31 f1       	breq	.+76     	; 0xfe <Dio_ReadChannel+0x5c>
  b2:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <channels+0x6>
  b6:	89 17       	cp	r24, r25
  b8:	29 f1       	breq	.+74     	; 0x104 <Dio_ReadChannel+0x62>
  ba:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <channels+0x9>
  be:	98 17       	cp	r25, r24
  c0:	21 f1       	breq	.+72     	; 0x10a <Dio_ReadChannel+0x68>
  c2:	2a e0       	ldi	r18, 0x0A	; 10
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	60 e0       	ldi	r22, 0x00	; 0
  c8:	8d e7       	ldi	r24, 0x7D	; 125
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 49 00 	call	0x92	; 0x92 <Det_ReportError>
  d0:	20 e0       	ldi	r18, 0x00	; 0
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	81 54       	subi	r24, 0x41	; 65
  d8:	91 09       	sbc	r25, r1
  da:	fc 01       	movw	r30, r24
  dc:	ee 0f       	add	r30, r30
  de:	ff 1f       	adc	r31, r31
  e0:	8e 0f       	add	r24, r30
  e2:	9f 1f       	adc	r25, r31
  e4:	ee 27       	eor	r30, r30
  e6:	ff 27       	eor	r31, r31
  e8:	e8 1b       	sub	r30, r24
  ea:	f9 0b       	sbc	r31, r25
  ec:	81 ad       	ldd	r24, Z+57	; 0x39
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <Dio_ReadChannel+0x54>
  f2:	95 95       	asr	r25
  f4:	87 95       	ror	r24
  f6:	2a 95       	dec	r18
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <Dio_ReadChannel+0x50>
  fa:	81 70       	andi	r24, 0x01	; 1
  fc:	08 95       	ret
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	05 c0       	rjmp	.+10     	; 0x10e <Dio_ReadChannel+0x6c>
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <Dio_ReadChannel+0x6c>
 10a:	83 e0       	ldi	r24, 0x03	; 3
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	fc 01       	movw	r30, r24
 110:	ee 0f       	add	r30, r30
 112:	ff 1f       	adc	r31, r31
 114:	e8 0f       	add	r30, r24
 116:	f9 1f       	adc	r31, r25
 118:	ec 59       	subi	r30, 0x9C	; 156
 11a:	ff 4f       	sbci	r31, 0xFF	; 255
 11c:	82 81       	ldd	r24, Z+2	; 0x02
 11e:	21 81       	ldd	r18, Z+1	; 0x01
 120:	d9 cf       	rjmp	.-78     	; 0xd4 <Dio_ReadChannel+0x32>
 122:	e4 e6       	ldi	r30, 0x64	; 100
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	82 81       	ldd	r24, Z+2	; 0x02
 128:	21 81       	ldd	r18, Z+1	; 0x01
 12a:	d4 cf       	rjmp	.-88     	; 0xd4 <Dio_ReadChannel+0x32>

0000012c <Dio_WriteChannel>:
 12c:	cf 93       	push	r28
 12e:	c6 2f       	mov	r28, r22
 130:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <channels>
 134:	89 17       	cp	r24, r25
 136:	09 f4       	brne	.+2      	; 0x13a <Dio_WriteChannel+0xe>
 138:	4a c0       	rjmp	.+148    	; 0x1ce <Dio_WriteChannel+0xa2>
 13a:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <channels+0x3>
 13e:	89 17       	cp	r24, r25
 140:	89 f1       	breq	.+98     	; 0x1a4 <Dio_WriteChannel+0x78>
 142:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <channels+0x6>
 146:	89 17       	cp	r24, r25
 148:	81 f1       	breq	.+96     	; 0x1aa <Dio_WriteChannel+0x7e>
 14a:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <channels+0x9>
 14e:	98 17       	cp	r25, r24
 150:	79 f1       	breq	.+94     	; 0x1b0 <Dio_WriteChannel+0x84>
 152:	2a e0       	ldi	r18, 0x0A	; 10
 154:	41 e0       	ldi	r20, 0x01	; 1
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	8d e7       	ldi	r24, 0x7D	; 125
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 49 00 	call	0x92	; 0x92 <Det_ReportError>
 160:	20 e0       	ldi	r18, 0x00	; 0
 162:	e0 e0       	ldi	r30, 0x00	; 0
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	e1 54       	subi	r30, 0x41	; 65
 168:	f1 09       	sbc	r31, r1
 16a:	cf 01       	movw	r24, r30
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	e8 0f       	add	r30, r24
 172:	f9 1f       	adc	r31, r25
 174:	f1 95       	neg	r31
 176:	e1 95       	neg	r30
 178:	f1 09       	sbc	r31, r1
 17a:	63 ad       	ldd	r22, Z+59	; 0x3b
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	02 2e       	mov	r0, r18
 182:	02 c0       	rjmp	.+4      	; 0x188 <Dio_WriteChannel+0x5c>
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	0a 94       	dec	r0
 18a:	e2 f7       	brpl	.-8      	; 0x184 <Dio_WriteChannel+0x58>
 18c:	80 95       	com	r24
 18e:	86 23       	and	r24, r22
 190:	6c 2f       	mov	r22, r28
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <Dio_WriteChannel+0x6e>
 196:	66 0f       	add	r22, r22
 198:	77 1f       	adc	r23, r23
 19a:	2a 95       	dec	r18
 19c:	e2 f7       	brpl	.-8      	; 0x196 <Dio_WriteChannel+0x6a>
 19e:	68 2b       	or	r22, r24
 1a0:	63 af       	std	Z+59, r22	; 0x3b
 1a2:	1d c0       	rjmp	.+58     	; 0x1de <Dio_WriteChannel+0xb2>
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	05 c0       	rjmp	.+10     	; 0x1b4 <Dio_WriteChannel+0x88>
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <Dio_WriteChannel+0x88>
 1b0:	83 e0       	ldi	r24, 0x03	; 3
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	dc 01       	movw	r26, r24
 1b6:	aa 0f       	add	r26, r26
 1b8:	bb 1f       	adc	r27, r27
 1ba:	a8 0f       	add	r26, r24
 1bc:	b9 1f       	adc	r27, r25
 1be:	ac 59       	subi	r26, 0x9C	; 156
 1c0:	bf 4f       	sbci	r27, 0xFF	; 255
 1c2:	12 96       	adiw	r26, 0x02	; 2
 1c4:	ec 91       	ld	r30, X
 1c6:	12 97       	sbiw	r26, 0x02	; 2
 1c8:	11 96       	adiw	r26, 0x01	; 1
 1ca:	2c 91       	ld	r18, X
 1cc:	cb cf       	rjmp	.-106    	; 0x164 <Dio_WriteChannel+0x38>
 1ce:	a4 e6       	ldi	r26, 0x64	; 100
 1d0:	b0 e0       	ldi	r27, 0x00	; 0
 1d2:	12 96       	adiw	r26, 0x02	; 2
 1d4:	ec 91       	ld	r30, X
 1d6:	12 97       	sbiw	r26, 0x02	; 2
 1d8:	11 96       	adiw	r26, 0x01	; 1
 1da:	2c 91       	ld	r18, X
 1dc:	c3 cf       	rjmp	.-122    	; 0x164 <Dio_WriteChannel+0x38>
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <Dio_FlipChannel>:
}
#endif

#if (DioFlipChannelApi == STD_ON)
Dio_LevelType Dio_FlipChannel(Dio_ChannelType ChannelId)
{
 1e2:	cf 93       	push	r28
 1e4:	c8 2f       	mov	r28, r24
	uint8 ch_pin = 0;
	
	for (i = 0; i < PINS_NUM; i++ )
	{
		
		if (ChannelId == channels[i].Channel_Id)
 1e6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <channels>
 1ea:	c8 17       	cp	r28, r24
 1ec:	09 f4       	brne	.+2      	; 0x1f0 <Dio_FlipChannel+0xe>
 1ee:	43 c0       	rjmp	.+134    	; 0x276 <Dio_FlipChannel+0x94>
 1f0:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <channels+0x3>
 1f4:	c8 17       	cp	r28, r24
 1f6:	51 f1       	breq	.+84     	; 0x24c <Dio_FlipChannel+0x6a>
 1f8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <channels+0x6>
 1fc:	c8 17       	cp	r28, r24
 1fe:	49 f1       	breq	.+82     	; 0x252 <Dio_FlipChannel+0x70>
 200:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <channels+0x9>
 204:	8c 17       	cp	r24, r28
 206:	41 f1       	breq	.+80     	; 0x258 <Dio_FlipChannel+0x76>
	}
	
#if DioDevErrorDetect == STD_ON
	if (i >= PINS_NUM)
	{
		Det_ReportError(DioId, 0, DIO_WRITECHANNEL_ID, DIO_E_PARAM_INVALID_CHANNEL_ID);
 208:	2a e0       	ldi	r18, 0x0A	; 10
 20a:	41 e0       	ldi	r20, 0x01	; 1
 20c:	60 e0       	ldi	r22, 0x00	; 0
 20e:	8d e7       	ldi	r24, 0x7D	; 125
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 49 00 	call	0x92	; 0x92 <Det_ReportError>
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	e1 e4       	ldi	r30, 0x41	; 65
	}
	
#endif
	
	
	TOGGLE_BIT(SPECIFIC_PORT_REG, ch_pin);
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	e1 54       	subi	r30, 0x41	; 65
 21e:	f1 09       	sbc	r31, r1
 220:	cf 01       	movw	r24, r30
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	e8 0f       	add	r30, r24
 228:	f9 1f       	adc	r31, r25
 22a:	f1 95       	neg	r31
 22c:	e1 95       	neg	r30
 22e:	f1 09       	sbc	r31, r1
 230:	23 ad       	ldd	r18, Z+59	; 0x3b
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	02 c0       	rjmp	.+4      	; 0x23c <Dio_FlipChannel+0x5a>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	3a 95       	dec	r19
 23e:	e2 f7       	brpl	.-8      	; 0x238 <Dio_FlipChannel+0x56>
 240:	82 27       	eor	r24, r18
 242:	83 af       	std	Z+59, r24	; 0x3b
	
	
	
	return Dio_ReadChannel(ChannelId);
 244:	8c 2f       	mov	r24, r28
 246:	0e 94 51 00 	call	0xa2	; 0xa2 <Dio_ReadChannel>
 24a:	1d c0       	rjmp	.+58     	; 0x286 <Dio_FlipChannel+0xa4>
	uint8 ch_pin = 0;
	
	for (i = 0; i < PINS_NUM; i++ )
	{
		
		if (ChannelId == channels[i].Channel_Id)
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	05 c0       	rjmp	.+10     	; 0x25c <Dio_FlipChannel+0x7a>
 252:	82 e0       	ldi	r24, 0x02	; 2
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <Dio_FlipChannel+0x7a>
 258:	83 e0       	ldi	r24, 0x03	; 3
 25a:	90 e0       	ldi	r25, 0x00	; 0
		{
			actual_port = channels[i].port;
 25c:	dc 01       	movw	r26, r24
 25e:	aa 0f       	add	r26, r26
 260:	bb 1f       	adc	r27, r27
 262:	a8 0f       	add	r26, r24
 264:	b9 1f       	adc	r27, r25
 266:	ac 59       	subi	r26, 0x9C	; 156
 268:	bf 4f       	sbci	r27, 0xFF	; 255
 26a:	12 96       	adiw	r26, 0x02	; 2
 26c:	ec 91       	ld	r30, X
 26e:	12 97       	sbiw	r26, 0x02	; 2
			ch_pin = channels[i].pin_num;
 270:	11 96       	adiw	r26, 0x01	; 1
 272:	3c 91       	ld	r19, X
 274:	d2 cf       	rjmp	.-92     	; 0x21a <Dio_FlipChannel+0x38>
	for (i = 0; i < PINS_NUM; i++ )
	{
		
		if (ChannelId == channels[i].Channel_Id)
		{
			actual_port = channels[i].port;
 276:	a4 e6       	ldi	r26, 0x64	; 100
 278:	b0 e0       	ldi	r27, 0x00	; 0
 27a:	12 96       	adiw	r26, 0x02	; 2
 27c:	ec 91       	ld	r30, X
 27e:	12 97       	sbiw	r26, 0x02	; 2
			ch_pin = channels[i].pin_num;
 280:	11 96       	adiw	r26, 0x01	; 1
 282:	3c 91       	ld	r19, X
 284:	ca cf       	rjmp	.-108    	; 0x21a <Dio_FlipChannel+0x38>
	
	
	
	return Dio_ReadChannel(ChannelId);
	
}
 286:	cf 91       	pop	r28
 288:	08 95       	ret

0000028a <main>:
#include "Port.h"
#include "Det.h"

int main(void)
{
	Port_Init(&port_config);
 28a:	80 e7       	ldi	r24, 0x70	; 112
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <Port_Init>
	
    /* Replace with your application code */
    while (1) 
    {
		Dio_FlipChannel(BUZZER);
 292:	86 e0       	ldi	r24, 0x06	; 6
 294:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <Dio_FlipChannel>
		Dio_WriteChannel(LED, STD_HIGH);
 298:	61 e0       	ldi	r22, 0x01	; 1
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a0:	2f ef       	ldi	r18, 0xFF	; 255
 2a2:	89 e6       	ldi	r24, 0x69	; 105
 2a4:	98 e1       	ldi	r25, 0x18	; 24
 2a6:	21 50       	subi	r18, 0x01	; 1
 2a8:	80 40       	sbci	r24, 0x00	; 0
 2aa:	90 40       	sbci	r25, 0x00	; 0
 2ac:	e1 f7       	brne	.-8      	; 0x2a6 <main+0x1c>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <main+0x26>
 2b0:	00 00       	nop
		_delay_ms(1000);
		Dio_FlipChannel(BUZZER);
 2b2:	86 e0       	ldi	r24, 0x06	; 6
 2b4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <Dio_FlipChannel>
		Dio_WriteChannel(LED, STD_LOW);
 2b8:	60 e0       	ldi	r22, 0x00	; 0
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_WriteChannel>
 2c0:	2f ef       	ldi	r18, 0xFF	; 255
 2c2:	89 e6       	ldi	r24, 0x69	; 105
 2c4:	98 e1       	ldi	r25, 0x18	; 24
 2c6:	21 50       	subi	r18, 0x01	; 1
 2c8:	80 40       	sbci	r24, 0x00	; 0
 2ca:	90 40       	sbci	r25, 0x00	; 0
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <main+0x3c>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <main+0x46>
 2d0:	00 00       	nop
		_delay_ms(1000);	
		
		if (Dio_ReadChannel(SW) == STD_HIGH)
 2d2:	89 e0       	ldi	r24, 0x09	; 9
 2d4:	0e 94 51 00 	call	0xa2	; 0xa2 <Dio_ReadChannel>
 2d8:	81 30       	cpi	r24, 0x01	; 1
 2da:	29 f4       	brne	.+10     	; 0x2e6 <main+0x5c>
		{
			Dio_WriteChannel(LED1, STD_HIGH);
 2dc:	61 e0       	ldi	r22, 0x01	; 1
 2de:	88 e0       	ldi	r24, 0x08	; 8
 2e0:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_WriteChannel>
 2e4:	d6 cf       	rjmp	.-84     	; 0x292 <main+0x8>
		}
		else
		{
			Dio_WriteChannel(LED1, STD_LOW);
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	88 e0       	ldi	r24, 0x08	; 8
 2ea:	0e 94 96 00 	call	0x12c	; 0x12c <Dio_WriteChannel>
 2ee:	d1 cf       	rjmp	.-94     	; 0x292 <main+0x8>

000002f0 <Port_Init>:


//for now(as we have only studied the DIO module) this function is responsible for setting the 
//direction register of atmega32 (DDR register) of the corresponding channels selected
void Port_Init(const Port_ConfigType * ConfigPtr)
{
 2f0:	1f 93       	push	r17
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	dc 01       	movw	r26, r24
 2f8:	bc 01       	movw	r22, r24
 2fa:	68 5f       	subi	r22, 0xF8	; 248
 2fc:	7f 4f       	sbci	r23, 0xFF	; 255
			ConfigPtr->ChsDataStates[i]->channel_state);
		}
		else //if pull up then make it input and put high to the PORT reg
		{
			// assign pin as input
			ASSIGN_BIT(*(DDR_REG_BASE + PORT_OFFSET(PORT_CH_DATA->port - 'A')), PORT_CH_DATA->pin_num, 0);
 2fe:	41 e0       	ldi	r20, 0x01	; 1
 300:	50 e0       	ldi	r21, 0x00	; 0
{
	
	for (uint8 i = 0; i < PINS_NUM; i++ )
	{
		
		if (ConfigPtr->ChsDataStates[i]->channel_state != PORT_PULLUP)
 302:	ed 91       	ld	r30, X+
 304:	fc 91       	ld	r31, X
 306:	11 97       	sbiw	r26, 0x01	; 1
 308:	92 81       	ldd	r25, Z+2	; 0x02
 30a:	92 30       	cpi	r25, 0x02	; 2
 30c:	29 f1       	breq	.+74     	; 0x358 <Port_Init+0x68>
		{
			//put this direction in the specific pin_no in the specific port
			ASSIGN_BIT(*(DDR_REG_BASE + PORT_OFFSET(PORT_CH_DATA->port - 'A')), PORT_CH_DATA->pin_num,
 30e:	c0 81       	ld	r28, Z
 310:	d1 81       	ldd	r29, Z+1	; 0x01
 312:	ea 81       	ldd	r30, Y+2	; 0x02
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	e1 54       	subi	r30, 0x41	; 65
 318:	f1 09       	sbc	r31, r1
 31a:	9f 01       	movw	r18, r30
 31c:	22 0f       	add	r18, r18
 31e:	33 1f       	adc	r19, r19
 320:	e2 0f       	add	r30, r18
 322:	f3 1f       	adc	r31, r19
 324:	f1 95       	neg	r31
 326:	e1 95       	neg	r30
 328:	f1 09       	sbc	r31, r1
 32a:	32 ad       	ldd	r19, Z+58	; 0x3a
 32c:	19 81       	ldd	r17, Y+1	; 0x01
 32e:	ea 01       	movw	r28, r20
 330:	01 2e       	mov	r0, r17
 332:	02 c0       	rjmp	.+4      	; 0x338 <Port_Init+0x48>
 334:	cc 0f       	add	r28, r28
 336:	dd 1f       	adc	r29, r29
 338:	0a 94       	dec	r0
 33a:	e2 f7       	brpl	.-8      	; 0x334 <Port_Init+0x44>
 33c:	2c 2f       	mov	r18, r28
 33e:	20 95       	com	r18
 340:	82 2f       	mov	r24, r18
 342:	83 23       	and	r24, r19
 344:	29 2f       	mov	r18, r25
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	02 c0       	rjmp	.+4      	; 0x34e <Port_Init+0x5e>
 34a:	22 0f       	add	r18, r18
 34c:	33 1f       	adc	r19, r19
 34e:	1a 95       	dec	r17
 350:	e2 f7       	brpl	.-8      	; 0x34a <Port_Init+0x5a>
 352:	28 2b       	or	r18, r24
 354:	22 af       	std	Z+58, r18	; 0x3a
 356:	35 c0       	rjmp	.+106    	; 0x3c2 <Port_Init+0xd2>
			ConfigPtr->ChsDataStates[i]->channel_state);
		}
		else //if pull up then make it input and put high to the PORT reg
		{
			// assign pin as input
			ASSIGN_BIT(*(DDR_REG_BASE + PORT_OFFSET(PORT_CH_DATA->port - 'A')), PORT_CH_DATA->pin_num, 0);
 358:	c0 81       	ld	r28, Z
 35a:	d1 81       	ldd	r29, Z+1	; 0x01
 35c:	ea 81       	ldd	r30, Y+2	; 0x02
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	e1 54       	subi	r30, 0x41	; 65
 362:	f1 09       	sbc	r31, r1
 364:	cf 01       	movw	r24, r30
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	e8 0f       	add	r30, r24
 36c:	f9 1f       	adc	r31, r25
 36e:	f1 95       	neg	r31
 370:	e1 95       	neg	r30
 372:	f1 09       	sbc	r31, r1
 374:	92 ad       	ldd	r25, Z+58	; 0x3a
 376:	9a 01       	movw	r18, r20
 378:	09 80       	ldd	r0, Y+1	; 0x01
 37a:	02 c0       	rjmp	.+4      	; 0x380 <Port_Init+0x90>
 37c:	22 0f       	add	r18, r18
 37e:	33 1f       	adc	r19, r19
 380:	0a 94       	dec	r0
 382:	e2 f7       	brpl	.-8      	; 0x37c <Port_Init+0x8c>
 384:	82 2f       	mov	r24, r18
 386:	80 95       	com	r24
 388:	89 23       	and	r24, r25
 38a:	82 af       	std	Z+58, r24	; 0x3a
			// put 1 to port pin to make it pull up
			ASSIGN_BIT(*(PORT_REG_BASE + PORT_OFFSET(PORT_CH_DATA->port - 'A')), PORT_CH_DATA->pin_num, 1);
 38c:	ed 91       	ld	r30, X+
 38e:	fc 91       	ld	r31, X
 390:	11 97       	sbiw	r26, 0x01	; 1
 392:	c0 81       	ld	r28, Z
 394:	d1 81       	ldd	r29, Z+1	; 0x01
 396:	ea 81       	ldd	r30, Y+2	; 0x02
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	e1 54       	subi	r30, 0x41	; 65
 39c:	f1 09       	sbc	r31, r1
 39e:	cf 01       	movw	r24, r30
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	e8 0f       	add	r30, r24
 3a6:	f9 1f       	adc	r31, r25
 3a8:	f1 95       	neg	r31
 3aa:	e1 95       	neg	r30
 3ac:	f1 09       	sbc	r31, r1
 3ae:	23 ad       	ldd	r18, Z+59	; 0x3b
 3b0:	ca 01       	movw	r24, r20
 3b2:	09 80       	ldd	r0, Y+1	; 0x01
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <Port_Init+0xca>
 3b6:	88 0f       	add	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	0a 94       	dec	r0
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <Port_Init+0xc6>
 3be:	82 2b       	or	r24, r18
 3c0:	83 af       	std	Z+59, r24	; 0x3b
 3c2:	12 96       	adiw	r26, 0x02	; 2
//for now(as we have only studied the DIO module) this function is responsible for setting the 
//direction register of atmega32 (DDR register) of the corresponding channels selected
void Port_Init(const Port_ConfigType * ConfigPtr)
{
	
	for (uint8 i = 0; i < PINS_NUM; i++ )
 3c4:	a6 17       	cp	r26, r22
 3c6:	b7 07       	cpc	r27, r23
 3c8:	09 f0       	breq	.+2      	; 0x3cc <Port_Init+0xdc>
 3ca:	9b cf       	rjmp	.-202    	; 0x302 <Port_Init+0x12>
			ASSIGN_BIT(*(PORT_REG_BASE + PORT_OFFSET(PORT_CH_DATA->port - 'A')), PORT_CH_DATA->pin_num, 1);
		}
		
	}
	
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	1f 91       	pop	r17
 3d2:	08 95       	ret

000003d4 <_exit>:
 3d4:	f8 94       	cli

000003d6 <__stop_program>:
 3d6:	ff cf       	rjmp	.-2      	; 0x3d6 <__stop_program>
